const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags } = require('discord.js');
const { primary } = require('../../color.json');
const { prefix } = require('../../config.json')

module.exports = {
    // ƒê√¢y l√† c√°ch ƒë·ªãnh nghƒ©a l·ªánh slash command
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh c·ªßa bot'),
    
    cooldown: 5, // Cooldown cho l·ªánh slash (t√≠nh b·∫±ng gi√¢y)
    category: 'System', // Category cho l·ªánh n√†y.

    async execute(interaction) {
        const client = interaction.client;
        const allCommands = new Map();

        // Thu th·∫≠p prefix commands
        if (client.prefix) { // ƒê·∫£m b·∫£o bi·∫øn n√†y t·ªìn t·∫°i v√† ch·ª©a c√°c l·ªánh prefix
            client.prefix.forEach(cmd => {
                allCommands.set(cmd.name, cmd);
            });
        }
        // Thu th·∫≠p slash commands
        if (client.slashCommands) { // ƒê·∫£m b·∫£o bi·∫øn n√†y t·ªìn t·∫°i v√† ch·ª©a c√°c l·ªánh slash
            client.slashCommands.forEach(cmd => {
                // Ki·ªÉm tra n·∫øu l·ªánh slash c√≥ c√πng t√™n v·ªõi l·ªánh prefix, ∆∞u ti√™n slash
                if (!allCommands.has(cmd.data.name)) {
                     allCommands.set(cmd.data.name, {
                        name: cmd.data.name,
                        description: cmd.data.description,
                        category: cmd.category || 'Unknown', // L·ªánh slash c≈©ng c·∫ßn category
                        aliases: [] // Slash commands kh√¥ng c√≥ aliases
                    });
                }
            });
        }

        if (allCommands.size === 0) {
            const noCommandsEmbed = new EmbedBuilder()
                .setColor("Red")
                .setDescription('Hi·ªán t·∫°i kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω.');
            return await interaction.reply({ embeds: [noCommandsEmbed], flags: MessageFlags.Ephemeral}); // ephemeral ƒë·ªÉ ch·ªâ ng∆∞·ªùi d√πng th·∫•y
        }

        // Nh√≥m c√°c l·ªánh theo category, lo·∫°i tr·ª´ 'Admin' v√† c√°c l·ªánh kh√¥ng c√≥ m√¥ t·∫£/category
        const categorizedCommands = new Map();
        allCommands.forEach(command => {
            // Ki·ªÉm tra xem l·ªánh c√≥ c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt v√† kh√¥ng thu·ªôc category 'Admin'
            const cmdName = command.name || (command.data && command.data.name);
            const cmdDescription = command.description || (command.data && command.data.description);
            const cmdCategory = command.category || (command.data && command.data.category); // Gi·∫£ ƒë·ªãnh l·ªánh slash c≈©ng c√≥ category

            if (cmdName && cmdDescription && cmdCategory && cmdCategory !== 'Admin') {
                if (!categorizedCommands.has(cmdCategory)) {
                    categorizedCommands.set(cmdCategory, []);
                }
                categorizedCommands.get(cmdCategory).push({
                    name: cmdName,
                    description: cmdDescription,
                    aliases: command.aliases || [] // Slash commands s·∫Ω c√≥ aliases r·ªóng
                });
            }
        });

        const categories = Array.from(categorizedCommands.keys());
        if (categories.length === 0) {
            const noCommandsEmbed = new EmbedBuilder()
                .setColor("Red")
                .setDescription('Hi·ªán t·∫°i kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ph√¢n lo·∫°i ho·∫∑c hi·ªÉn th·ªã (sau khi l·ªçc).');
            return await interaction.reply({ embeds: [noCommandsEmbed], flags: MessageFlags.Ephemeral});
        }

        // S·∫Øp x·∫øp c√°c category theo th·ª© t·ª± mong mu·ªën
        categories.sort();

        let currentCategory = categories[0]; // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã category ƒë·∫ßu ti√™n

        // H√†m t·∫°o Embed cho category hi·ªán t·∫°i
        const createHelpEmbed = (categoryName) => {
            const cmds = categorizedCommands.get(categoryName);

            const embed = new EmbedBuilder()
                .setColor(primary)
                .setTitle(`üìö L·ªánh Bot - ${categoryName} üìö`)
                .setDescription(`S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem l·ªánh c·ªßa t·ª´ng danh m·ª•c.\n\n`);

            const commandList = cmds.map(cmd => {
                // V·ªõi slash commands, kh√¥ng c√≥ prefix ho·∫∑c aliases hi·ªÉn th·ªã tr·ª±c ti·∫øp
                // C·∫ßn ph√¢n bi·ªát r√µ gi·ªØa prefix v√† slash command n·∫øu mu·ªën hi·ªÉn th·ªã kh√°c nhau
                let commandIdentifier;
                if (client.prefix && client.prefix.has(cmd.name)) { // L√† prefix command
                    commandIdentifier = `\`${prefix || ','}${cmd.name}\``;
                    const aliases = cmd.aliases && cmd.aliases.length > 0 ? ` (Alias: \`${cmd.aliases.join('`, `')}\`)` : '';
                    return `${commandIdentifier}${aliases} - ${cmd.description}`;
                } else if (client.slashCommands && client.slashCommands.has(cmd.name)) { // L√† slash command
                     commandIdentifier = `\`/${cmd.name}\``; // Slash command
                     return `${commandIdentifier} - ${cmd.description}`;
                } else { // Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i l·ªánh
                    return `\`${cmd.name}\` - ${cmd.description}`;
                }
               
            }).join('\n');

            embed.addFields({
                name: 'C√°c l·ªánh c√≥ s·∫µn:',
                value: commandList.length > 0 ? commandList : 'Kh√¥ng c√≥ l·ªánh n√†o trong danh m·ª•c n√†y.',
                inline: false
            });

            embed.setFooter({ text: `Y√™u c·∫ßu b·ªüi: ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL({ dynamic: true }) });
            return embed;
        };

        // H√†m t·∫°o h√†ng n√∫t cho t·∫•t c·∫£ c√°c category
        const createCategoryRows = (currentSelectedCategory) => {
            const rows = [];
            let currentRow = new ActionRowBuilder();
            let buttonCount = 0;

            for (const category of categories) {
                if (buttonCount === 5) {
                    rows.push(currentRow);
                    currentRow = new ActionRowBuilder();
                    buttonCount = 0;
                }

                currentRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`help_category_${category}_${interaction.user.id}`) // Th√™m User ID v√†o customId ƒë·ªÉ ch·ªâ ng∆∞·ªùi d√πng n√†y c√≥ th·ªÉ t∆∞∆°ng t√°c
                        .setLabel(category)
                        .setStyle(category === currentSelectedCategory ? ButtonStyle.Success : ButtonStyle.Secondary)
                );
                buttonCount++;
            }
            if (currentRow.components.length > 0) {
                rows.push(currentRow);
            }
            return rows;
        };

        // G·ª≠i ph·∫£n h·ªìi ban ƒë·∫ßu v·ªõi category ƒë·∫ßu ti√™n v√† c√°c n√∫t
        const initialEmbed = createHelpEmbed(currentCategory);
        const initialRows = createCategoryRows(currentCategory);

        // S·ª≠ d·ª•ng interaction.reply() ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi
        const response = await interaction.reply({
            embeds: [initialEmbed],
            components: initialRows,
            fetchReply: true // ƒê·ªÉ c√≥ th·ªÉ l·∫•y ƒë∆∞·ª£c tin nh·∫Øn ƒë√£ g·ª≠i v√† t·∫°o collector
        });

        // T·∫°o Collector ƒë·ªÉ l·∫Øng nghe t∆∞∆°ng t√°c n√∫t
        const collector = response.createMessageComponentCollector({
            // Filter: i.customId ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'help_category_' V√Ä ch·ª©a User ID c·ªßa ng∆∞·ªùi d√πng ban ƒë·∫ßu
            filter: i => i.customId.startsWith('help_category_') && i.customId.endsWith(`_${interaction.user.id}`),
            time: 300000 // Collector s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t
        });

        collector.on('collect', async i => {
            // L·∫•y category t·ª´ customId, lo·∫°i b·ªè ph·∫ßn 'help_category_' v√† User ID
            const selectedCategory = i.customId.replace(`help_category_`, '').replace(`_${interaction.user.id}`, ''); 

            if (selectedCategory === 'Admin') {
                await i.deferUpdate(); 
                return; 
            }

            currentCategory = selectedCategory;

            const updatedEmbed = createHelpEmbed(currentCategory);
            const updatedRows = createCategoryRows(currentCategory);

            await i.update({ // S·ª≠ d·ª•ng i.update() ƒë·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn hi·ªán c√≥
                embeds: [updatedEmbed],
                components: updatedRows
            });
        });

        collector.on('end', async () => {
            // Khi collector k·∫øt th√∫c, v√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t
            const disabledRows = createCategoryRows(currentCategory); 
            disabledRows.forEach(row => {
                row.components.forEach(button => button.setDisabled(true));
            });

            try {
                // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi ch·ªânh s·ª≠a
                await interaction.editReply({ components: disabledRows });
            } catch (error) {
                console.error("L·ªói khi v√¥ hi·ªáu h√≥a n√∫t help (slash):", error);
            }
        });
    }
};