const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, ComponentType, EmbedBuilder } = require("discord.js");
const User = require('../../models/user.model.js');
const { 
    createNewDeck, 
    formatHandForDisplay, 
    drawNewCard, 
    calculateHandValue, // ƒê·∫£m b·∫£o import h√†m n√†y
    isXiDach, 
    isXiBan, 
    isNguLinh, 
    isBust 
} = require('../../helpers/blackjackHelper.js');
const { decBalance, incBalance } = require('../../helpers/userHelper.js'); 
const {prefix} = require('../../config.json')
const PRIMARY_COLOR = '#AA60C8'; 

module.exports = {
    cooldown: 5,
    category: 'Casino',
    data: new SlashCommandBuilder()
        .setName('black-jack')
        .setDescription('Ch∆°i x√¨ d√°ch nha bro')
        .addIntegerOption(option => 
            option
                .setName('bet')
                .setDescription('S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c')
                .setMinValue(1)
                .setRequired(true)
        ),
        async execute(interaction) {
            // try {
            //     await interaction.deferReply();

            //     const wager = interaction.options.getInteger('bet');
            //     const userData = await User.findOne({userId: interaction.user.id});

            //     // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i cho footer
            //     const playerUsername = interaction.user.username;
            //     const playerAvatarURL = interaction.user.displayAvatarURL({ dynamic: true });
            //     if (!userData) {
            //         const embed = new EmbedBuilder()
            //             .setColor("#D91656")
            //             .setDescription(`B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Casino. D√πng l·ªánh /start ƒë·ªÉ t·∫°o t√†i kho·∫£n.`);
            //         return await interaction.editReply({embeds: [embed]}); 
            //     }
            //     if (wager > userData.balance) {
            //         const embed = new EmbedBuilder()
            //             .setColor("#D91656")
            //             .setDescription(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c. B·∫°n c√≥: **$${new Intl.NumberFormat("en").format(userData.balance)}**`);
            //         return await interaction.editReply({embeds: [embed]}); 
            //     }
            //     if (wager <= 0) {
            //         const embed = new EmbedBuilder()
            //             .setColor("#D91656")
            //             .setDescription(`S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.`);
            //         return await interaction.editReply({embeds: [embed]}); 
            //     }

            //     const deckData = await createNewDeck(); 
            //     if (!deckData || !deckData.success || deckData.cards.length < 4) {
            //         console.error('Kh√¥ng ƒë·ªß b√†i t·ª´ API ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n ƒë·∫•u.');
            //         return await interaction.editReply({ 
            //             embeds: [new EmbedBuilder().setColor("#D91656").setDescription("Kh√¥ng th·ªÉ t·∫°o v√°n ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i sau.")],
            //             components: []
            //         });
            //     }

            //     const userID = interaction.user.id;
            //     const deckID = deckData.deck_id;
            //     const dealerHand = [];
            //     const playerHand = [];

            //     playerHand.push(deckData.cards[0]);
            //     dealerHand.push(deckData.cards[1]);
            //     playerHand.push(deckData.cards[2]);
            //     dealerHand.push(deckData.cards[3]);
                
            //     await decBalance(userID, wager);

            //     let gameEndedImmediately = false;
            //     let finalEmbed = new EmbedBuilder().setColor(PRIMARY_COLOR);

            //     const playerIsXiDach = isXiDach(playerHand);
            //     const playerIsXiBan = isXiBan(playerHand);
            //     const dealerIsXiDach = isXiDach(dealerHand);
            //     const dealerIsXiBan = isXiBan(dealerHand);

            //     // T√≠nh ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i v√† dealer cho c√°c tr∆∞·ªùng h·ª£p k·∫øt th√∫c ngay l·∫≠p t·ª©c
            //     const initialPlayerScore = calculateHandValue(playerHand);
            //     const initialDealerScore = calculateHandValue(dealerHand);

            //     if (playerIsXiBan) {
            //         finalEmbed.setTitle('üéâ X√å B√ÄN! B·∫°n th·∫Øng l·ªõn! x2.5 s·ªë ti·ªÅn c∆∞·ª£c. üéâ');
            //         finalEmbed.addFields( // S·ª≠ d·ª•ng addFields
            //             { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`, value: formatHandForDisplay(dealerHand, false), inline: false },
            //             { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //         );
            //         finalEmbed.setColor("#00FF9C"); // Green for win
            //         await incBalance(userID, wager * 2.5); 
            //         gameEndedImmediately = true;
            //     } else if (playerIsXiDach) {
            //         finalEmbed.setTitle('ü•≥ X√å D√ÅCH! B·∫°n th·∫Øng! x2 s·ªë ti·ªÅn c∆∞·ª£c. üéâ');
            //         finalEmbed.addFields( // S·ª≠ d·ª•ng addFields
            //             { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`, value: formatHandForDisplay(dealerHand, false), inline: false },
            //             { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //         );
            //         finalEmbed.setColor("#00FF9C"); // Green for win
            //         await incBalance(userID, wager * 2); 
            //         gameEndedImmediately = true;
            //     } else if (dealerIsXiBan) {
            //         finalEmbed.setTitle('üíî Dealer X√å B√ÄN! B·∫°n thua.');
            //         finalEmbed.addFields( // S·ª≠ d·ª•ng addFields
            //             { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`, value: formatHandForDisplay(dealerHand, false), inline: false },
            //             { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //         );
            //         finalEmbed.setColor("#D91656"); // Red for loss
            //         gameEndedImmediately = true;
            //     } else if (dealerIsXiDach) {
            //         finalEmbed.setTitle('üò≠ Dealer X√å D√ÅCH! B·∫°n thua.');
            //         finalEmbed.addFields( // S·ª≠ d·ª•ng addFields
            //             { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`, value: formatHandForDisplay(dealerHand, false), inline: false },
            //             { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //         );
            //         finalEmbed.setColor("#D91656"); // Red for loss
            //         gameEndedImmediately = true;
            //     }

            //     if (gameEndedImmediately) {
            //         return await interaction.editReply({ embeds: [finalEmbed], components: [] });
            //     }

            //     // --- N·∫øu kh√¥ng c√≥ X√¨ D√°ch/X√¨ B√†n ngay l·∫≠p t·ª©c, b·∫Øt ƒë·∫ßu game b√¨nh th∆∞·ªùng ---
            //     // T√≠nh ƒëi·ªÉm hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i ƒë·ªÉ hi·ªÉn th·ªã ban ƒë·∫ßu
            //     let playerCurrentScore = calculateHandValue(playerHand);

            //     let gameEmbed = new EmbedBuilder()
            //         .setColor(PRIMARY_COLOR)
            //         .setTitle('X√¨ d√°ch Vietnamese üÉè')
            //         .addFields(
            //             { name: 'B√†i c·ªßa Dealer', value: '```?? ??```', inline: false }, 
            //             { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //         )
            //         .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`, iconURL: playerAvatarURL });;

            //     const hitButton = new ButtonBuilder()
            //         .setCustomId('HIT')
            //         .setLabel('‚§¥Ô∏è R√öT')
            //         .setStyle(ButtonStyle.Primary);
                
            //     const standButton = new ButtonBuilder()
            //         .setCustomId('STAND')
            //         .setLabel('‚õî D·ª™NG')
            //         .setStyle(ButtonStyle.Success);

            //     const buttonRow = new ActionRowBuilder().addComponents([hitButton, standButton]);

            //     const response = await interaction.editReply({
            //         embeds: [gameEmbed],
            //         components: [buttonRow],
            //         fetchReply: true,
            //     });

            //     const collector = response.createMessageComponentCollector({ 
            //         componentType: ComponentType.Button, 
            //         time: 60000, 
            //         filter: i => i.user.id === userID 
            //     });

            //     collector.on('collect', async i => {
            //         await i.deferUpdate();

            //         // T·∫°o m·ªôt b·∫£n sao c·ªßa EmbedBuilder ho·∫∑c t·∫°o l·∫°i ho√†n to√†n ƒë·ªÉ c·∫≠p nh·∫≠t
            //         let currentEmbed = new EmbedBuilder()
            //             .setColor(gameEmbed.color || PRIMARY_COLOR) 
            //             .setTitle(gameEmbed.data.title || 'X√¨ d√°ch Vietnamese üÉè')
            //             .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`, iconURL: playerAvatarURL });;
                    
            //         // C·∫≠p nh·∫≠t ƒëi·ªÉm ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi t·∫°o fields m·ªõi
            //         playerCurrentScore = calculateHandValue(playerHand); // L·∫•y ƒëi·ªÉm ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t fields

            //         if (i.customId === 'HIT') {
            //             const newCard = await drawNewCard(deckID); 
            //             playerHand.push(newCard);
            //             playerCurrentScore = calculateHandValue(playerHand); // C·∫≠p nh·∫≠t ƒëi·ªÉm sau khi r√∫t
                        
            //             // C·∫≠p nh·∫≠t fields c·ªßa embed m·ªõi v·ªõi ƒëi·ªÉm s·ªë
            //             currentEmbed.addFields(
            //                 { name: 'B√†i c·ªßa Dealer', value: '```?? ??```', inline: false }, // V·∫´n ·∫©n b√†i Dealer
            //                 { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //             );

            //             if (isNguLinh(playerHand)) {
            //                 currentEmbed.setTitle('üéâ NG≈® LINH! B·∫°n th·∫Øng! x2 s·ªë ti·ªÅn c∆∞·ª£c. üéâ');
            //                 // Hi·ªÉn th·ªã b√†i v√† ƒëi·ªÉm c·ªßa Dealer khi game k·∫øt th√∫c
            //                 currentEmbed.data.fields[0].value = formatHandForDisplay(dealerHand, false); 
            //                 currentEmbed.data.fields[0].name = `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${calculateHandValue(dealerHand)})`;
            //                 currentEmbed.setColor("#00FF9C");
            //                 await incBalance(userID, wager * 3); 
            //                 await i.editReply({ embeds: [currentEmbed], components: [] });
            //                 collector.stop(); 
            //                 return; 
            //             } else if (isBust(playerHand)) {
            //                 let dealerScoreAtBust = calculateHandValue(dealerHand);
            //                 while (dealerScoreAtBust < 17 && dealerHand.length <= 5) {
            //                     const newCardDealer = await drawNewCard(deckID);
            //                     dealerHand.push(newCardDealer);
            //                     dealerScoreAtBust = calculateHandValue(dealerHand);
            //                 }

            //                 let finalMessage = '';
            //                 let playerResult = 'loss';

            //                 if (isBust(dealerHand)) {
            //                     finalMessage = 'ü§ù H√íA! C·∫£ hai c√πng qu·∫Øc!';
            //                     currentEmbed.setColor("#FFEB55");
            //                     await incBalance(userID, wager);
            //                     playerResult = 'draw';
            //                 } else {
            //                     finalMessage = 'üíî QU·∫ÆC! B·∫°n thua.';
            //                     currentEmbed.setColor("#D91656");
            //                     playerResult = 'loss';
            //                 }
            //                 currentEmbed.setTitle(finalMessage);

            //                 currentEmbed.data.fields[0].value = formatHandForDisplay(dealerHand, false); 
            //                 currentEmbed.data.fields[0].name = `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerScoreAtBust})`;
            //                 currentEmbed.setColor("#D91656");
            //                 await i.editReply({ embeds: [currentEmbed], components: [] });
            //                 collector.stop(); 
            //                 return; 
            //             } 
                        
            //             await i.editReply({ embeds: [currentEmbed], components: [buttonRow] });

            //         } else if (i.customId === 'STAND') { 
            //             // C·∫≠p nh·∫≠t ƒëi·ªÉm ng∆∞·ªùi ch∆°i l·∫ßn cu·ªëi tr∆∞·ªõc khi dealer r√∫t b√†i
            //             playerCurrentScore = calculateHandValue(playerHand); 

            //             let dealerScore = calculateHandValue(dealerHand);
            //             while (dealerScore < 17  && dealerHand.length <= 5) {
            //                 const newCard = await drawNewCard(deckID); 
            //                 dealerHand.push(newCard);
            //                 dealerScore = calculateHandValue(dealerHand);
            //             }

            //             const dealerFinalScore = calculateHandValue(dealerHand); // ƒêi·ªÉm cu·ªëi c√πng c·ªßa Dealer

            //             // T·∫°o fields m·ªõi cho embed cu·ªëi c√πng, hi·ªán ƒë·∫ßy ƒë·ªß b√†i v√† ƒëi·ªÉm Dealer
            //             currentEmbed.addFields(
            //                 { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerFinalScore})`, value: formatHandForDisplay(dealerHand, false), inline: false }, 
            //                 { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //             );

            //             let finalMessage = '';
            //             let playerWon = false;

            //             if (isBust(dealerHand)) {
            //                 finalMessage = 'üéâ DEALER QU·∫ÆC! B·∫°n th·∫Øng! x1 s·ªë ti·ªÅn c∆∞·ª£c.';
            //                 currentEmbed.setColor("#00FF9C");
            //                 playerWon = true;
            //             } else if (playerCurrentScore > dealerFinalScore) { // So s√°nh v·ªõi ƒëi·ªÉm cu·ªëi c√πng c·ªßa dealer
            //                 finalMessage = 'ü•≥ B·∫†N TH·∫ÆNG! x1 s·ªë ti·ªÅn c∆∞·ª£c.';
            //                 currentEmbed.setColor("#00FF9C");
            //                 playerWon = true;
            //             } else if (playerCurrentScore < dealerFinalScore) { // So s√°nh v·ªõi ƒëi·ªÉm cu·ªëi c√πng c·ªßa dealer
            //                 finalMessage = 'üò≠ B·∫†N THUA!';
            //                 currentEmbed.setColor("#D91656");
            //                 playerWon = false;
            //             } else {
            //                 finalMessage = 'ü§ù H√íA!'; 
            //                 currentEmbed.setColor("#FFEB55");
            //                 playerWon = false;
            //                 await incBalance(userID, wager);
            //             }

            //             currentEmbed.setTitle(finalMessage);
                        
            //             if (playerWon) {
            //                 await incBalance(userID, wager * 2); 
            //             } 

            //             await i.editReply({ embeds: [currentEmbed], components: [] }); 
            //             collector.stop();
            //             return; 
            //         }
            //     });

            //     collector.on('end', async (collected, reason) => {
            //         if (reason === 'time' && collected.size === 0) {
            //             // T√≠nh ƒëi·ªÉm cu·ªëi c√πng c·ªßa ng∆∞·ªùi ch∆°i v√† dealer khi h·∫øt gi·ªù
            //             const finalPlayerScore = calculateHandValue(playerHand);
            //             const finalDealerScore = calculateHandValue(dealerHand);

            //             const timeoutEmbed = new EmbedBuilder()
            //                 .setTitle('‚è±Ô∏è H·∫øt gi·ªù! V√°n ƒë·∫•u k·∫øt th√∫c.')
            //                 .setDescription('B·∫°n kh√¥ng t∆∞∆°ng t√°c ho·∫∑c b·ªã treo. Ti·ªÅn c∆∞·ª£c b·ªã m·∫•t.')
            //                 .addFields(
            //                     { name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${finalDealerScore})`, value: formatHandForDisplay(dealerHand, false), inline: false }, 
            //                     { name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${finalPlayerScore})`, value: formatHandForDisplay(playerHand, false), inline: false }
            //                 )
            //                 .setColor("#F0EBE3")
            //                 .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`, iconURL: playerAvatarURL }); 
            //             await interaction.editReply({ embeds: [timeoutEmbed], components: [] });
            //             console.log(`V√°n ƒë·∫•u c·ªßa ${userID} k·∫øt th√∫c do h·∫øt th·ªùi gian.`);
            //         }
            //     });

            // } catch (error) {
            //     console.error('C√≥ l·ªói ·ªü blackjack command:', error); 
            //     if (interaction.deferred || interaction.replied) {
            //         const errorEmbed = new EmbedBuilder()
            //             .setColor("Red")
            //             .setDescription('C√≥ l·ªói x·∫£y ra. Vui l√≤ng li√™n h·ªá v·ªõi admin.')
            //             .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`, iconURL: playerAvatarURL }); // Th√™m footer
            //         await interaction.editReply({ embeds: [errorEmbed] });
            //     } else {
            //         const errorEmbed = new EmbedBuilder()
            //             .setColor("Red")
            //             .setDescription('C√≥ l·ªói x·∫£y ra. Vui l√≤ng li√™n h·ªá v·ªõi admin.')
            //             .setFooter({ text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`, iconURL: playerAvatarURL }); // Th√™m footer
            //         await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            //     }
            // }
            return await interaction.reply({content: `Vui l√≤ng d√πng l·ªánh \`${prefix}blackjack <bet>\` thay cho l·ªánh n√†y.`})
        }
};