const {
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  ComponentType,
  EmbedBuilder,
} = require("discord.js");
const User = require("../../models/user.model.js");
const {
  createNewDeck,
  formatHandForDisplay,
  drawNewCard,
  calculateHandValue,
  isXiDach,
  isXiBan,
  isNguLinh,
  isBust,
} = require("../../helpers/blackjackHelper.js");
const { decBalance, incBalance } = require("../../helpers/userHelper.js");

const PRIMARY_COLOR = "#AA60C8";

module.exports = {
  cooldown: 5000,
  category: 'Casino',
  name: "blackjack", // T√™n l·ªánh
  aliases: ["bj"], // C√°c bi·ªát danh c·ªßa l·ªánh
  description: "Ch∆°i X√¨ D√°ch Vietnamese üÉè",
  usage: '<bet>',
  run: async (client, message, args) => {
    // Thay ƒë·ªïi t·ª´ execute(interaction) sang run(client, message, args)
    try {
      // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i cho footer
      const playerUsername = message.author.username;
      const playerAvatarURL = message.author.displayAvatarURL({
        dynamic: true,
      });

      const userData = await User.findOne({ userId: message.author.id }); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ message.author.id
      if (!userData) {
        const embed = new EmbedBuilder()
          .setColor("#D91656")
          .setDescription(
            `B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Casino. D√πng l·ªánh \`\`\`${client.prefix}start\`\`\` ƒë·ªÉ t·∫°o t√†i kho·∫£n.`
          )
          .setFooter({
            text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
            iconURL: playerAvatarURL,
          });
        return await message.channel.send({ embeds: [embed] }); // Tr·∫£ l·ªùi nhanh
      }

      let wager;
      // Ki·ªÉm tra n·∫øu args[0] l√† 'all' (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
      if (args[0] && args[0].toLowerCase() === "all") {
        wager = userData.balance; // ƒê·∫∑t c∆∞·ª£c t·∫•t c·∫£ s·ªë ti·ªÅn hi·ªán c√≥
      } else {
        wager = parseInt(args[0]); // L·∫•y s·ªë ti·ªÅn c∆∞·ª£c t·ª´ ƒë·ªëi s·ªë ƒë·∫ßu ti√™n
      }

      // X·ª≠ l√Ω gi·ªõi h·∫°n c∆∞·ª£c n·∫øu s·ªë ti·ªÅn l·ªõn h∆°n 300,000
      const MAX_WAGER = 300000;
      if (wager > MAX_WAGER) {
        wager = MAX_WAGER;
      }

      // **Ph·∫£n h·ªìi nhanh ch√≥ng v·ªõi l·ªói ƒë·∫ßu ti√™n**
      if (isNaN(wager) || wager <= 0) {
        const embed = new EmbedBuilder()
          .setColor("#D91656")
          .setDescription(`Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá (ph·∫£i l·ªõn h∆°n 0).`)
          .setFooter({
            text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
            iconURL: playerAvatarURL,
          });
        return await message.channel.send({ embeds: [embed] }); // Tr·∫£ l·ªùi nhanh
      }

      if (wager > userData.balance) {
        const embed = new EmbedBuilder()
          .setColor("#D91656")
          .setDescription(
            `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c. B·∫°n c√≥: **$${new Intl.NumberFormat(
              "en"
            ).format(userData.balance)}**`
          )
          .setFooter({
            text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
            iconURL: playerAvatarURL,
          });
        return await message.channel.send({ embeds: [embed] }); // Tr·∫£ l·ªùi nhanh
      }

      const deckData = await createNewDeck();
      if (!deckData || !deckData.success || deckData.cards.length < 4) {
        console.error("Kh√¥ng ƒë·ªß b√†i t·ª´ API ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n ƒë·∫•u.");
        return await message.channel.send({
          // Tr·∫£ l·ªùi nhanh
          embeds: [
            new EmbedBuilder()
              .setColor("#D91656")
              .setDescription("Kh√¥ng th·ªÉ t·∫°o v√°n ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i sau.")
              .setFooter({
                text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
                iconURL: playerAvatarURL,
              }),
          ],
          components: [],
        });
      }

      const userID = message.author.id; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ message.author.id
      const deckID = deckData.deck_id;
      const dealerHand = [];
      const playerHand = [];

      playerHand.push(deckData.cards[0]);
      dealerHand.push(deckData.cards[1]);
      playerHand.push(deckData.cards[2]);
      dealerHand.push(deckData.cards[3]);

      await decBalance(userID, wager);

      let gameEndedImmediately = false;
      let finalEmbed = new EmbedBuilder().setColor(PRIMARY_COLOR);

      const playerIsXiDach = isXiDach(playerHand);
      const playerIsXiBan = isXiBan(playerHand);
      const dealerIsXiDach = isXiDach(dealerHand);
      const dealerIsXiBan = isXiBan(dealerHand);

      // T√≠nh ƒëi·ªÉm c·ªßa ng∆∞·ªùi ch∆°i v√† dealer cho c√°c tr∆∞·ªùng h·ª£p k·∫øt th√∫c ngay l·∫≠p t·ª©c
      const initialPlayerScore = calculateHandValue(playerHand);
      let initialDealerScore = calculateHandValue(dealerHand); // Kh·ªüi t·∫°o v·ªõi let ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi

      // Immediate win/loss conditions - Dealer's hand IS REVEALED
      if (playerIsXiBan && dealerIsXiBan) {
        finalEmbed.setTitle(`ü§ù SONG X√å B√ÄN! H√íA!`);
        finalEmbed.setColor("#FFEB55"); // M√†u v√†ng cho h√≤a
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        // Ho√†n ti·ªÅn c∆∞·ª£c, v√¨ ban ƒë·∫ßu ƒë√£ tr·ª´ wager r·ªìi
        await incBalance(userID, wager); // Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c
        gameEndedImmediately = true;
      }
      // Tr∆∞·ªùng h·ª£p 2: Ng∆∞·ªùi ch∆°i X√¨ B√†n, Dealer kh√¥ng X√¨ B√†n
      else if (playerIsXiBan) {
        finalEmbed.setTitle(
          `üéâ X√å B√ÄN! B·∫°n th·∫Øng l·ªõn! x2.5 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
            "en"
          ).format(2.5 * wager)}). üéâ`
        );
        finalEmbed.setColor("#00FF9C"); // Green for win
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        await incBalance(userID, wager * 3.5); // (wager g·ªëc ƒë√£ tr·ª´) + 2.5 * wager = t·ªïng 3.5 * wager
        gameEndedImmediately = true;
      }
      // Tr∆∞·ªùng h·ª£p 3: Dealer X√¨ B√†n, Ng∆∞·ªùi ch∆°i kh√¥ng X√¨ B√†n (ƒë√£ x·ª≠ l√Ω playerIsXiBan ·ªü tr√™n)
      else if (dealerIsXiBan) {
        finalEmbed.setTitle(
          `üíî Dealer X√å B√ÄN! B·∫°n thua (-$${new Intl.NumberFormat("en").format(
            2.5 * wager
          )}).`
        );
        finalEmbed.setColor("#D91656"); // Red for loss
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        // Ti·ªÅn c∆∞·ª£c ƒë√£ tr·ª´ l√∫c ƒë·∫ßu, gi·ªù tr·ª´ th√™m 1.5x ƒë·ªÉ th√†nh 2.5x
        await decBalance(userID, 1.5 * wager); // Tr·ª´ th√™m 1.5 l·∫ßn c∆∞·ª£c (t·ªïng 2.5 l·∫ßn)
        gameEndedImmediately = true;
      }
      // Tr∆∞·ªùng h·ª£p 4: C·∫£ hai ƒë·ªÅu c√≥ X√¨ D√°ch (sau khi ƒë√£ ki·ªÉm tra X√¨ B√†n)
      else if (playerIsXiDach && dealerIsXiDach) {
        finalEmbed.setTitle(`ü§ù SONG X√å D√ÅCH! H√íA!`);
        finalEmbed.setColor("#FFEB55"); // M√†u v√†ng cho h√≤a
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        await incBalance(userID, wager); // Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c
        gameEndedImmediately = true;
      }
      // Tr∆∞·ªùng h·ª£p 5: Ng∆∞·ªùi ch∆°i X√¨ D√°ch, Dealer kh√¥ng X√¨ D√°ch (v√† kh√¥ng X√¨ B√†n)
      else if (playerIsXiDach) {
        finalEmbed.setTitle(
          `ü•≥ X√å D√ÅCH! B·∫°n th·∫Øng! x1 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
            "en"
          ).format(1 * wager)}). üéâ`
        );
        finalEmbed.setColor("#00FF9C"); // Green for win
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        await incBalance(userID, wager * 2);
        gameEndedImmediately = true;
      }
      // Tr∆∞·ªùng h·ª£p 6: Dealer X√¨ D√°ch, Ng∆∞·ªùi ch∆°i kh√¥ng X√¨ D√°ch (v√† kh√¥ng X√¨ B√†n)
      else if (dealerIsXiDach) {
        finalEmbed.setTitle(
          `üò≠ Dealer X√å D√ÅCH! B·∫°n thua (-$${new Intl.NumberFormat("en").format(
            1 * wager
          )}).`
        );
        finalEmbed.setColor("#D91656"); // Red for loss
        finalEmbed.addFields(
          // S·ª≠ d·ª•ng addFields

          {
            name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${initialDealerScore})`,
            value: formatHandForDisplay(dealerHand, false),
            inline: false,
          },

          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${initialPlayerScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        );
        gameEndedImmediately = true;
      }

      if (gameEndedImmediately) {
        finalEmbed.setFooter({
          text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
          iconURL: playerAvatarURL,
        }); // Th√™m footer tr∆∞·ªõc khi g·ª≠i
        return await message.channel.send({
          embeds: [finalEmbed],
          components: [],
        }); // Tr·∫£ l·ªùi nhanh
      }

      // --- N·∫øu kh√¥ng c√≥ X√¨ D√°ch/X√¨ B√†n ngay l·∫≠p t·ª©c, b·∫Øt ƒë·∫ßu game b√¨nh th∆∞·ªùng ---
      let playerCurrentScore = calculateHandValue(playerHand);

      let gameEmbed = new EmbedBuilder()
        .setColor(PRIMARY_COLOR)
        .setTitle("X√¨ d√°ch Vietnamese üÉè")
        .setDescription(
          `S·ªë ti·ªÅn c∆∞·ª£c: **$${new Intl.NumberFormat("en").format(wager)}**`
        )
        .addFields(
          // Dealer's hand completely hidden during player's turn
          { name: "B√†i c·ªßa Dealer", value: "<:backside:1383700179324244039>  <:backside:1383700179324244039>", inline: false },
          {
            name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`,
            value: formatHandForDisplay(playerHand, false),
            inline: false,
          }
        )
        .setFooter({
          text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
          iconURL: playerAvatarURL,
        }); // Th√™m footer

      const hitButton = new ButtonBuilder()
        .setCustomId("HIT")
        .setLabel("‚§¥Ô∏è R√öT")
        .setStyle(ButtonStyle.Primary);

      const standButton = new ButtonBuilder()
        .setCustomId("STAND")
        .setLabel("‚õî D·ª™NG")
        .setStyle(ButtonStyle.Success);

      const buttonRow = new ActionRowBuilder().addComponents([
        hitButton,
        standButton,
      ]);

      // G·ª≠i tin nh·∫Øn ban ƒë·∫ßu v√† l∆∞u tr·ªØ n√≥ ƒë·ªÉ edit sau
      const response = await message.channel.send({
        // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
        embeds: [gameEmbed],
        components: [buttonRow],
        fetchReply: true, // Quan tr·ªçng ƒë·ªÉ l·∫•y message object cho collector
      });

      const collector = response.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 60000, // 60 gi√¢y ƒë·ªÉ ph·∫£n h·ªìi
        filter: (i) => i.user.id === userID, // Ch·ªâ ng∆∞·ªùi ch∆°i ban ƒë·∫ßu m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
      });

      collector.on("collect", async (i) => {
        await i.deferUpdate(); // Defer the button interaction

        let currentEmbed = new EmbedBuilder()
          .setColor(gameEmbed.color || PRIMARY_COLOR)
          .setTitle(gameEmbed.data.title || "X√¨ d√°ch Vietnamese üÉè")
          .setDescription(
            `S·ªë ti·ªÅn c∆∞·ª£c: **$${new Intl.NumberFormat("en").format(wager)}**`
          )
          .setFooter({
            text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
            iconURL: playerAvatarURL,
          }); // Th√™m footer v√†o m·ªói l·∫ßn c·∫≠p nh·∫≠t embed

        // C·∫≠p nh·∫≠t ƒëi·ªÉm ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi t·∫°o fields m·ªõi
        playerCurrentScore = calculateHandValue(playerHand); // L·∫•y ƒëi·ªÉm ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t fields

        if (i.customId === "HIT") {
          const newCard = await drawNewCard(deckID);
          playerHand.push(newCard);
          playerCurrentScore = calculateHandValue(playerHand); // C·∫≠p nh·∫≠t ƒëi·ªÉm sau khi r√∫t

          // C·∫≠p nh·∫≠t fields c·ªßa embed m·ªõi v·ªõi ƒëi·ªÉm s·ªë
          currentEmbed.addFields(
            { name: "B√†i c·ªßa Dealer", value: "<:backside:1383700179324244039>  <:backside:1383700179324244039>", inline: false }, // V·∫´n ·∫©n b√†i Dealer
            {
              name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`,
              value: formatHandForDisplay(playerHand, false),
              inline: false,
            }
          );

          if (isNguLinh(playerHand)) {
            // Ng∆∞·ªùi ch∆°i Ng≈© Linh, Dealer ph·∫£i r√∫t b√†i ƒë·∫øn khi ƒë·∫°t 17 ho·∫∑c qu·∫Øc
            let dealerScoreAtNguLinh = calculateHandValue(dealerHand);
            while (dealerScoreAtNguLinh < 17 && !isBust(dealerHand)  && dealerHand.length <= 5) {
              // Th√™m ƒëi·ªÅu ki·ªán !isBust(dealerHand) ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n n·∫øu Dealer lu√¥n < 17
              const newCardDealer = await drawNewCard(deckID);
              dealerHand.push(newCardDealer);
              dealerScoreAtNguLinh = calculateHandValue(dealerHand);
            }

            const dealerIsNguLinh = isNguLinh(dealerHand);

            if (dealerIsNguLinh) {
              // C·∫¢ HAI ƒê·ªÄU NG≈® LINH
              let finalMessage = "";
              let playerWon = false;

              // So s√°nh ƒëi·ªÉm Ng≈© Linh: ai nh·ªè h∆°n th·∫Øng
              if (playerCurrentScore < dealerScoreAtNguLinh) {
                finalMessage = `üéâ SONG LINH! B·∫°n th·∫Øng v·ªõi Ng≈© Linh ƒëi·ªÉm th·∫•p h∆°n (${playerCurrentScore} < ${dealerScoreAtNguLinh})! x2 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
                  "en"
                ).format(2 * wager)}). üéâ`;
                currentEmbed.setColor("#00FF9C"); // M√†u xanh l√° cho th·∫Øng
                await incBalance(userID, wager * 3); // Ng≈© Linh th∆∞·ªùng th·∫Øng x2 ti·ªÅn c∆∞·ª£c g·ªëc (t·ªïng 3 l·∫ßn c∆∞·ª£c)
                playerWon = true;
              } else if (playerCurrentScore > dealerScoreAtNguLinh) {
                finalMessage = `üíî SONG LINH! B·∫°n thua v·ªõi Ng≈© Linh ƒëi·ªÉm cao h∆°n (${playerCurrentScore} > ${dealerScoreAtNguLinh}) (-$${new Intl.NumberFormat(
                  "en"
                ).format(wager)}).`;
                currentEmbed.setColor("#D91656"); // M√†u ƒë·ªè cho thua
                playerWon = false;
              } else {
                // B·∫±ng ƒëi·ªÉm
                finalMessage = `ü§ù SONG LINH! C·∫£ hai Ng≈© Linh c√πng ƒëi·ªÉm (${playerCurrentScore})! H√íA.`;
                currentEmbed.setColor("#FFEB55"); // M√†u v√†ng cho h√≤a
                await incBalance(userID, wager); // Ho√†n ti·ªÅn c∆∞·ª£c
                playerWon = false;
              }
              currentEmbed.setTitle(finalMessage);
            } else {
              // CH·ªà NG∆Ø·ªúI CH∆†I NG≈® LINH, DEALER KH√îNG NG≈® LINH
              currentEmbed.setTitle(
                `üéâ NG≈® LINH! B·∫°n th·∫Øng! x2 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
                  "en"
                ).format(2 * wager)}). üéâ`
              );
              currentEmbed.setColor("#00FF9C"); // M√†u xanh l√° cho th·∫Øng
              await incBalance(userID, wager * 3); // Ng≈© Linh th∆∞·ªùng th·∫Øng x2 ti·ªÅn c∆∞·ª£c g·ªëc (t·ªïng 3 l·∫ßn c∆∞·ª£c)
            }

            // Hi·ªÉn th·ªã b√†i v√† ƒëi·ªÉm c·ªßa Dealer khi game k·∫øt th√∫c
            currentEmbed.data.fields[0].value = formatHandForDisplay(
              dealerHand,
              false
            );
            currentEmbed.data.fields[0].name = `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerScoreAtNguLinh})`;
            await response.edit({ embeds: [currentEmbed], components: [] }); // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
            collector.stop();
            return;
          } else if (isBust(playerHand)) {
            // Ng∆∞·ªùi ch∆°i qu·∫Øc
            // Dealer ph·∫£i r√∫t ƒë·∫øn 17/qu·∫Øc (lu·∫≠t X√¨ D√°ch Vi·ªát Nam)
            let dealerScoreAtBust = calculateHandValue(dealerHand);
            while (dealerScoreAtBust < 17 && dealerHand.length <= 5) {
              const newCardDealer = await drawNewCard(deckID);
              dealerHand.push(newCardDealer);
              dealerScoreAtBust = calculateHandValue(dealerHand);
            }

            let finalMessage = "";
            // N·∫øu ng∆∞·ªùi ch∆°i qu·∫Øc, ki·ªÉm tra Dealer
            if (isBust(dealerHand)) {
              finalMessage = "ü§ù H√íA! C·∫£ hai c√πng qu·∫Øc!";
              currentEmbed.setColor("#FFEB55"); // M√†u v√†ng cho h√≤a
              await incBalance(userID, wager); // Ng∆∞·ªùi ch∆°i ƒë∆∞·ª£c ho√†n ti·ªÅn c∆∞·ª£c
            } else {
              finalMessage = `üíî QU·∫ÆC! B·∫°n thua (-$${new Intl.NumberFormat(
                "en"
              ).format(wager)}).`;
              currentEmbed.setColor("#D91656"); // M√†u ƒë·ªè cho thua
              // Ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´ tr∆∞·ªõc ƒë√≥, kh√¥ng l√†m g√¨ th√™m n·∫øu thua
            }
            currentEmbed.setTitle(finalMessage);

            currentEmbed.data.fields[0].value = formatHandForDisplay(
              dealerHand,
              false
            );
            currentEmbed.data.fields[0].name = `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerScoreAtBust})`;

            await response.edit({ embeds: [currentEmbed], components: [] }); // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
            collector.stop();
            return;
          }

          await response.edit({
            embeds: [currentEmbed],
            components: [buttonRow],
          }); // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
        } else if (i.customId === "STAND") {
          // C·∫≠p nh·∫≠t ƒëi·ªÉm ng∆∞·ªùi ch∆°i l·∫ßn cu·ªëi tr∆∞·ªõc khi dealer r√∫t b√†i
          playerCurrentScore = calculateHandValue(playerHand);

          let finalMessage = "";
          let playerWon = false;
          let dealerFinalScore = calculateHandValue(dealerHand); // ƒêi·ªÉm ban ƒë·∫ßu c·ªßa Dealer

          // --- LU·∫¨T M·ªöI: N·∫øu ng∆∞·ªùi ch∆°i D·ª™NG v√† ƒëi·ªÉm < 16, ng∆∞·ªùi ch∆°i thua ngay l·∫≠p t·ª©c ---
          if (playerCurrentScore < 16) {
            finalMessage = `ü•≤ B·∫†N THUA! S·ªë ƒëi·ªÉm th·∫•p h∆°n 16 (-$${new Intl.NumberFormat(
              "en"
            ).format(wager)}).`;
            currentEmbed.setColor("#D91656");
            playerWon = false; // Ng∆∞·ªùi ch∆°i thua

            // KH√îNG C·∫¶N DEALER R√öT B√ÄI TRONG TR∆Ø·ªúNG H·ª¢P N√ÄY
            // Dealer v·∫´n hi·ªÉn th·ªã b√†i c·ªßa m√¨nh ƒë·ªÉ ng∆∞·ªùi ch∆°i bi·∫øt
            currentEmbed.addFields(
              {
                name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerFinalScore})`,
                value: formatHandForDisplay(dealerHand, false),
                inline: false,
              },
              {
                name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`,
                value: formatHandForDisplay(playerHand, false),
                inline: false,
              }
            );
          } else {
            // --- C√°c tr∆∞·ªùng h·ª£p c√≤n l·∫°i (ng∆∞·ªùi ch∆°i >= 16) ---
            let dealerScore = calculateHandValue(dealerHand);
            while (dealerScore < 17  && dealerHand.length <= 5) {
              const newCard = await drawNewCard(deckID);
              dealerHand.push(newCard);
              dealerScore = calculateHandValue(dealerHand);
            }

            dealerFinalScore = calculateHandValue(dealerHand); // ƒêi·ªÉm cu·ªëi c√πng c·ªßa Dealer sau khi r√∫t

            // T·∫°o fields m·ªõi cho embed cu·ªëi c√πng, hi·ªán ƒë·∫ßy ƒë·ªß b√†i v√† ƒëi·ªÉm Dealer
            currentEmbed.addFields(
              {
                name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${dealerFinalScore})`,
                value: formatHandForDisplay(dealerHand, false),
                inline: false,
              },
              {
                name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${playerCurrentScore})`,
                value: formatHandForDisplay(playerHand, false),
                inline: false,
              }
            );

            if (isNguLinh(dealerHand)) {
              finalMessage = `üéâ DEALER NG≈® LINH! B·∫°n thua! (-$${new Intl.NumberFormat(
                "en"
              ).format(2 * wager)}).`;
              currentEmbed.setColor("#D91656");
              playerWon = false;
              decBalance(userID, wager);
            } else if (isBust(dealerHand)) {
              finalMessage = `üéâ DEALER QU·∫ÆC! B·∫°n th·∫Øng! x1 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
                "en"
              ).format(1 * wager)}).`;
              currentEmbed.setColor("#00FF9C");
              playerWon = true;
            } else if (playerCurrentScore > dealerFinalScore) {
              finalMessage = `ü•≥ B·∫†N TH·∫ÆNG! x1 s·ªë ti·ªÅn c∆∞·ª£c (+$${new Intl.NumberFormat(
                "en"
              ).format(1 * wager)}).`;
              currentEmbed.setColor("#00FF9C");
              playerWon = true;
            } else if (playerCurrentScore < dealerFinalScore) {
              finalMessage = `üò≠ B·∫†N THUA! (-$${new Intl.NumberFormat(
                "en"
              ).format(wager)}).`;
              // Gi·ªØ nguy√™n th√¥ng b√°o "D·∫±n d∆°" n·∫øu ƒëi·ªÉm l√† 16 ho·∫∑c 17
              if (playerCurrentScore === 16 || playerCurrentScore === 17) {
                if (playerHand.length === 2 && playerCurrentScore === 16)
                  finalMessage = `üò≠ B·∫†N THUA! D·∫±n d∆° h·∫£ m√†i (-$${new Intl.NumberFormat(
                    "en"
                  ).format(wager)})`;
                else
                  finalMessage = `üò≠ B·∫†N THUA! R√∫t n·ªØa ƒëi m√° (-$${new Intl.NumberFormat(
                    "en"
                  ).format(wager)})`;
              }
              currentEmbed.setColor("#D91656");
              playerWon = false;
            } else {
              // H√≤a
              finalMessage = "ü§ù H√íA!";
              currentEmbed.setColor("#FFEB55"); // M√†u v√†ng cho h√≤a
              playerWon = false;
              await incBalance(userID, wager); // Ho√†n ti·ªÅn c∆∞·ª£c cho h√≤a
            }
          } // K·∫øt th√∫c else (playerCurrentScore >= 16)

          currentEmbed.setTitle(finalMessage);

          if (playerWon) {
            await incBalance(userID, wager * 2); // Th·∫Øng th√¨ nh·∫≠n l·∫°i g·ªëc + th√™m 1 l·∫ßn c∆∞·ª£c = t·ªïng 2 l·∫ßn c∆∞·ª£c
          }

          await response.edit({ embeds: [currentEmbed], components: [] });
          collector.stop();
          return;
        }
      });

      collector.on("end", async (collected, reason) => {
        if (reason === "time" && collected.size === 0) {
          // Ng∆∞·ªùi ch∆°i kh√¥ng t∆∞∆°ng t√°c, ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´
          // Dealer v·∫´n r√∫t b√†i ƒë·ªÉ ho√†n thi·ªán v√°n ƒë·∫•u hi·ªÉn th·ªã
          let finalDealerScore = calculateHandValue(dealerHand);
          while (finalDealerScore < 17  && dealerHand.length <= 5) {
            const newCardDealer = await drawNewCard(deckID);
            dealerHand.push(newCardDealer);
            finalDealerScore = calculateHandValue(dealerHand);
          }

          const finalPlayerScore = calculateHandValue(playerHand);

          const timeoutEmbed = new EmbedBuilder()
            .setTitle("‚è±Ô∏è H·∫øt gi·ªù! V√°n ƒë·∫•u k·∫øt th√∫c.")
            .setDescription("B·∫°n kh√¥ng t∆∞∆°ng t√°c k·ªãp. Ti·ªÅn c∆∞·ª£c b·ªã m·∫•t.")
            .addFields(
              {
                name: `B√†i c·ªßa Dealer (ƒêi·ªÉm: ${finalDealerScore})`,
                value: formatHandForDisplay(dealerHand, false),
                inline: false,
              },
              {
                name: `B√†i c·ªßa Ng∆∞·ªùi ch∆°i (ƒêi·ªÉm: ${finalPlayerScore})`,
                value: formatHandForDisplay(playerHand, false),
                inline: false,
              }
            )
            .setColor("#F0EBE3") // M√†u x√°m cho h·∫øt gi·ªù
            .setFooter({
              text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
              iconURL: playerAvatarURL,
            });
          await response.edit({ embeds: [timeoutEmbed], components: [] }); // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
          console.log(`V√°n ƒë·∫•u c·ªßa ${userID} k·∫øt th√∫c do h·∫øt th·ªùi gian.`);
        }
      });
    } catch (error) {
      console.error("C√≥ l·ªói ·ªü blackjack command (prefix):", error);
      const playerUsername = message.author.username;
      const playerAvatarURL = message.author.displayAvatarURL({
        dynamic: true,
      });

      const errorEmbed = new EmbedBuilder()
        .setColor("#D91656")
        .setDescription("C√≥ l·ªói x·∫£y ra. Vui l√≤ng li√™n h·ªá v·ªõi admin.")
        .setFooter({
          text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
          iconURL: playerAvatarURL,
        });
      await message.channel.send({ embeds: [errorEmbed] }); // <-- Thay ƒë·ªïi ·ªü ƒë√¢y
    }
  },
};
