const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, Collection } = require("discord.js");
const User = require("../../models/user.model.js"); // ƒê∆∞·ªùng d·∫´n t·ªõi User model c·ªßa b·∫°n
const { incBalance, decBalance } = require("../../helpers/userHelper.js"); // Import h√†m tƒÉng/gi·∫£m s·ªë d∆∞
const { prefix } = require('../../config.json');
const { success, danger, purple } = require('../../color.json');
const { convertInt } = require('../../helpers/utility.js');

// C·∫•u h√¨nh tr√≤ ch∆°i
const MAX_BET_AMOUNT = 300000; // Gi·ªõi h·∫°n ti·ªÅn c∆∞·ª£c t·ªëi ƒëa
const WIN_MULTIPLIER = 2.5;    // H·ªá s·ªë nh√¢n ti·ªÅn th·∫Øng (ƒë·∫∑t 100 th·∫Øng 300)

// Emojis v√† h√¨nh ·∫£nh
const CUP_EMOJI = 'ü™£'; // Emoji c·ªëc ƒë·ªè
const BALL_EMOJI = '‚ö™'; // Emoji qu·∫£ b√≥ng tr·∫Øng
const COIN_EMOJI = 'ü™ô'; // Emoji ƒë·ªìng ti·ªÅn (ho·∫∑c thay b·∫±ng emoji custom c·ªßa b·∫°n)

// Collection ƒë·ªÉ theo d√µi game ƒëang di·ªÖn ra c·ªßa user, ngƒÉn spam
const activeGames = new Collection(); 

// H√†m l·∫•y s·ªë nguy√™n ng·∫´u nhi√™n
function getRandomInteger(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

module.exports = {
    // Cooldown cho l·ªánh prefix (n·∫øu b·∫°n c√≥ h·ªá th·ªëng cooldown chung cho c√°c l·ªánh)
    cooldown: 5000, 
    category: 'Casino',
    name: "cups",
    aliases: ["cup"],
    description: "ƒêo√°n v·ªã tr√≠ c·ªßa qu·∫£ b√≥ng trong 3 chi·∫øc c·ªëc",
    usage: "<bet>", 
    run: async (client, message, args) => {
        const playerUsername = message.author.username;
        const playerAvatarURL = message.author.displayAvatarURL({ dynamic: true });
        const userID = message.author.id;

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒëang c√≥ m·ªôt game cups kh√°c ƒëang di·ªÖn ra kh√¥ng
        if (activeGames.has(userID)) {
            const embed = new EmbedBuilder()
                .setColor(danger)
                .setDescription(`B·∫°n ƒëang c√≥ m·ªôt tr√≤ ch∆°i \`cups\` kh√°c ƒëang di·ªÖn ra. Vui l√≤ng ho√†n th√†nh ho·∫∑c ƒë·ª£i tr√≤ ch∆°i ƒë√≥ k·∫øt th√∫c.`);
            return await message.channel.send({ embeds: [embed] });
        }

        try {
            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ t√†i kho·∫£n casino ch∆∞a
            const userData = await User.findOne({ userId: userID });
            if (!userData) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Casino. D√πng l·ªánh \`${prefix}start\` ƒë·ªÉ t·∫°o t√†i kho·∫£n.`)
                    .setFooter({ text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`, iconURL: playerAvatarURL });
                return await message.channel.send({ embeds: [embed] });
            }

            // --- X·ª≠ l√Ω s·ªë ti·ªÅn c∆∞·ª£c ---
            let betAmountInput = args[0]?.toLowerCase();
            let betAmount;

            if (betAmountInput === "all") {
                betAmount = userData.balance; 
            } else {
                betAmount = parseInt(betAmountInput); 
            }

            if (isNaN(betAmount) || betAmount <= 0) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá (ph·∫£i l√† s·ªë d∆∞∆°ng) ho·∫∑c 'all'. V√≠ d·ª•: \`${prefix}cups 1000\``);
                return await message.channel.send({ embeds: [embed] });
            }

            // Gi·ªõi h·∫°n s·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa
            if (betAmount > MAX_BET_AMOUNT) {
                betAmount = MAX_BET_AMOUNT;
            }

            // Ki·ªÉm tra ƒë·ªß ti·ªÅn
            if (userData.balance < betAmount) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c **$${convertInt(betAmount)}** ${COIN_EMOJI}. S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† **${convertInt(userData.balance)}** ${COIN_EMOJI}.`);
                return await message.channel.send({ embeds: [embed] });
            }

            // --- Tr·ª´ ti·ªÅn c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i ngay l·∫≠p t·ª©c ---
            await decBalance(userID, betAmount);
            userData.balance -= betAmount; // C·∫≠p nh·∫≠t s·ªë d∆∞ trong b·ªô nh·ªõ cho hi·ªÉn th·ªã

            // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒëang trong m·ªôt tr√≤ ch∆°i cups
            activeGames.set(userID, true);

            // V·ªã tr√≠ b√≥ng ng·∫´u nhi√™n (l∆∞u √Ω: v·ªã tr√≠ 0, 1, 2 ƒë·ªÉ d·ªÖ l√†m vi·ªác v·ªõi m·∫£ng)
            const ballPositionIndex = getRandomInteger(0, 2); 

            // X√¢y d·ª±ng h√†ng n√∫t l·ª±a ch·ªçn
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        // ƒê√∫ng customId: `gameType_action_chosenValue_userID_ballPosition_betAmount`
                        // Example: `cups_choice_1_123456789_0_100`
                        .setCustomId(`cups_choice_1_${userID}_${ballPositionIndex}_${betAmount}`) 
                        .setLabel('1')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`cups_choice_2_${userID}_${ballPositionIndex}_${betAmount}`)
                        .setLabel('2')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`cups_choice_3_${userID}_${ballPositionIndex}_${betAmount}`)
                        .setLabel('3')
                        .setStyle(ButtonStyle.Primary),
                );

            // G·ª≠i embed ban ƒë·∫ßu ƒë·ªÉ ng∆∞·ªùi ch∆°i ch·ªçn c·ªëc
            const initialCupsDisplay = Array(3).fill(CUP_EMOJI).join(' '); 

            const initialEmbed = new EmbedBuilder()
                .setColor(purple) // M√†u t√≠m/x√°m nh∆∞ trong h√¨nh
                .setTitle("Cups")
                .setDescription(
                    `**Ch·ªçn 1 chi·∫øc c·ªëc**\n` +
                    `\n` +
                    `${initialCupsDisplay}\n\n` + 
                    `B·∫°n ƒë√£ c∆∞·ª£c **$${convertInt(betAmount)}** ${COIN_EMOJI}`
                )
                .setFooter({
                    text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`,
                    iconURL: playerAvatarURL,
                });

            const sentMessage = await message.channel.send({
                embeds: [initialEmbed],
                components: [row]
            });

            // --- Collector ƒë·ªÉ l·∫Øng nghe button click ---
            const filter = i => i.customId.startsWith('cups_choice_') && i.user.id === userID;
            const collector = sentMessage.createMessageComponentCollector({ filter, time: 30000 }); // Th·ªùi gian ch·ªù 30 gi√¢y

            collector.on('collect', async i => {
                // ƒê·∫£m b·∫£o ch·ªâ x·ª≠ l√Ω t∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi ch∆°i hi·ªán t·∫°i v√† ch·ªâ m·ªôt l·∫ßn
                if (i.customId.includes(userID) && i.customId.startsWith('cups_choice_') && i.message.id === sentMessage.id) {
                    collector.stop(); // D·ª´ng collector ngay sau khi nh·∫≠n ƒë∆∞·ª£c l·ª±a ch·ªçn h·ª£p l·ªá

                    // *** ƒê√É S·ª¨A CH·ªñ N√ÄY ***
                    // Correct parsing for customId: `cups_choice_chosenValue_userID_ballPosition_betAmount`
                    const parts = i.customId.split('_');
                    const chosenCup = parseInt(parts[2]); // L·∫•y chosenCupNumber (v√≠ d·ª•: '1')
                    const storedUserID = parts[3]; // L·∫•y userID (ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng ng∆∞·ªùi ch∆°i)
                    const actualBallPositionIndex = parseInt(parts[4]); // L·∫•y ballPositionIndex (v√≠ d·ª•: '0')
                    const actualBetAmount = parseInt(parts[5]); // L·∫•y betAmount (v√≠ d·ª•: '100')
                    // *********************

                    let winAmount = 0;
                    let resultDescription = "";
                    let embedColor = "";

                    // X√¢y d·ª±ng chu·ªói emoji c·ªëc sau khi l·∫≠t
                    let finalCupsDisplay = '';
                    for (let x = 0; x < 3; x++) {
                        if (x === actualBallPositionIndex) { 
                            finalCupsDisplay += `${BALL_EMOJI} `; // Qu·∫£ b√≥ng ·ªü v·ªã tr√≠ n√†y
                        } else {
                            finalCupsDisplay += `${CUP_EMOJI} `; // C·ªëc r·ªóng
                        }
                    }
                    
                    try {
                        const updatedUserData = await User.findOne({ userId: userID }); // L·∫•y l·∫°i d·ªØ li·ªáu user ƒë·ªÉ c√≥ balance m·ªõi nh·∫•t
                        if (!updatedUserData) {
                            console.error("User data not found for button click during game:", userID);
                            return i.update({ content: 'C√≥ l·ªói x·∫£y ra, kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng∆∞·ªùi ch∆°i.', components: [] });
                        }

                        if ((chosenCup - 1) === actualBallPositionIndex) { 
                            // Ng∆∞·ªùi ch∆°i th·∫Øng
                            winAmount = actualBetAmount * WIN_MULTIPLIER;
                            await incBalance(userID, winAmount);
                            
                            resultDescription = `B·∫°n th·∫Øng **$${convertInt(winAmount)}**\nB·∫°n ƒë√£ t√¨m th·∫•y qu·∫£ b√≥ng!`;
                            embedColor = success; // M√†u xanh l√° c√¢y cho th·∫Øng
                            // updatedUserData.balance ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi incBalance, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t l·∫°i trong b·ªô nh·ªõ
                        } else {
                            // Ng∆∞·ªùi ch∆°i thua
                            resultDescription = `B·∫°n thua **$${convertInt(actualBetAmount)}**\nB·∫°n ch·ªçn c·ªëc s·ªë **${chosenCup}** nh∆∞ng qu·∫£ b√≥ng ·ªü trong c·ªëc s·ªë **${actualBallPositionIndex + 1}**`;
                            embedColor = danger; // M√†u ƒë·ªè cho thua
                            // S·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ƒë·∫∑t c∆∞·ª£c (ƒë√£ tr·ª´ ban ƒë·∫ßu)
                        }

                        // C·∫≠p nh·∫≠t embed v·ªõi k·∫øt qu·∫£ cu·ªëi c√πng
                        const finalEmbed = new EmbedBuilder()
                            .setColor(embedColor)
                            .setTitle("Cups")
                            .setDescription(
                                `**K·∫øt qu·∫£**\n` +
                                `\n` +
                                `${finalCupsDisplay}\n\n` +
                                `${resultDescription}`
                            )
                            .setFooter({
                                text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`,
                                iconURL: playerAvatarURL,
                            });

                        // Ch·ªânh s·ª≠a tin nh·∫Øn g·ªëc v√† lo·∫°i b·ªè c√°c button
                        await i.update({
                            embeds: [finalEmbed],
                            components: [] 
                        });

                    } catch (err) {
                        console.error("L·ªói khi x·ª≠ l√Ω click button cups:", err);
                        await i.update({ content: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n!', components: [] });
                    } finally {
                        activeGames.delete(userID); // X√≥a game kh·ªèi activeGames khi k·∫øt th√∫c
                    }
                }
            });

            collector.on('end', async (collected, reason) => {
                // N·∫øu ng∆∞·ªùi ch∆°i kh√¥ng ch·ªçn trong th·ªùi gian quy ƒë·ªãnh
                if (reason === 'time' && activeGames.has(userID)) {
                    // Ho√†n l·∫°i ti·ªÅn cho ng∆∞·ªùi ch∆°i n·∫øu h·ªç kh√¥ng ch·ªçn
                    await incBalance(userID, betAmount); 
                    const expiredEmbed = new EmbedBuilder()
                        .setColor(danger)
                        .setTitle("Cups - ƒê√£ h·∫øt th·ªùi gian!")
                        .setDescription(`Tr√≤ ch∆°i c·ªßa b·∫°n ƒë√£ h·∫øt th·ªùi gian. **${convertInt(betAmount)}** ${COIN_EMOJI} ti·ªÅn c∆∞·ª£c ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.`);
                    
                    try {
                        // C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi th√¥ng b√°o h·∫øt th·ªùi gian v√† lo·∫°i b·ªè buttons
                        await sentMessage.edit({ embeds: [expiredEmbed], components: [] });
                    } catch (editError) {
                        console.error("Could not edit message after cups game timed out:", editError);
                    }
                    activeGames.delete(userID); // X√≥a game kh·ªèi activeGames khi h·∫øt th·ªùi gian
                }
            });

        } catch (error) {
            console.error("C√≥ l·ªói ·ªü l·ªánh cups:", error);
            const errorEmbed = new EmbedBuilder()
                .setColor(danger)
                .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh cups. Vui l√≤ng li√™n h·ªá v·ªõi admin.");
            await message.channel.send({ embeds: [errorEmbed] });
            activeGames.delete(userID); // ƒê·∫£m b·∫£o x√≥a kh·ªèi activeGames n·∫øu c√≥ l·ªói ngay t·ª´ ƒë·∫ßu
        }
    },
};