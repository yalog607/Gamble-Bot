const { EmbedBuilder } = require("discord.js");
const User = require("../../models/user.model.js"); // ƒê∆∞·ªùng d·∫´n t·ªõi User model c·ªßa b·∫°n
const { incBalance, decBalance } = require("../../helpers/userHelper.js"); // Import h√†m tƒÉng/gi·∫£m s·ªë d∆∞
const { prefix } = require('../../config.json');
const { success, danger } = require('../../color.json');

// Th√™m gi·ªõi h·∫°n ti·ªÅn c∆∞·ª£c t·ªëi ƒëa ·ªü ƒë√¢y
const MAX_BET_AMOUNT = 300000;

function getRandomInteger(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

module.exports = {
    cooldown: 5000,
    category: 'Casino',
    name: "coinflip",
    aliases: ["cf", "latdongxu"],
    description: "L·∫≠t ƒë·ªìng xu head/tail (ho·∫∑c h/t)",
    usage: "<s·ªë ti·ªÅn | all> <head/tail/h/t>", // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh
    run: async (client, message, args) => {
        const playerUsername = message.author.username;
        const playerAvatarURL = message.author.displayAvatarURL({ dynamic: true }); // ƒê√£ s·ª≠a l·ªói ch√≠nh t·∫£ ·ªü ƒë√¢y
        const userID = message.author.id;

        try {
            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ t√†i kho·∫£n casino ch∆∞a
            const userData = await User.findOne({ userId: userID });
            if (!userData) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(
                        `B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Casino. D√πng l·ªánh \`${client.prefix}start\` ƒë·ªÉ t·∫°o t√†i kho·∫£n.`
                    )
                    .setFooter({
                        text: `Ng∆∞·ªùi g·ª≠i: ${playerUsername}`,
                        iconURL: playerAvatarURL,
                    });
                return await message.channel.send({ embeds: [embed] });
            }

            // L·∫•y s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c t·ª´ args[0]
            let betAmountInput = args[0]?.toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ ki·ªÉm tra "all"
            let betAmount;

            // --- X·ª≠ l√Ω logic "all" ho·∫∑c s·ªë ti·ªÅn c·ª• th·ªÉ ---
            if (betAmountInput === "all") {
                betAmount = userData.balance; // ƒê·∫∑t c∆∞·ª£c to√†n b·ªô s·ªë ti·ªÅn
            } else {
                betAmount = parseInt(betAmountInput); // Chuy·ªÉn ƒë·ªïi sang s·ªë nguy√™n
            }

            if (isNaN(betAmount) || betAmount <= 0) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá (ph·∫£i l√† s·ªë d∆∞∆°ng) ho·∫∑c 'all'.`);
                return await message.channel.send({ embeds: [embed] });
            }
            // ---------------------------------------------

            // Ki·ªÉm tra gi·ªõi h·∫°n ti·ªÅn c∆∞·ª£c t·ªëi ƒëa
            if (betAmount > MAX_BET_AMOUNT) {
                betAmount = MAX_BET_AMOUNT; // ƒê·∫∑t l·∫°i s·ªë ti·ªÅn c∆∞·ª£c v·ªÅ m·ª©c t·ªëi ƒëa
            }

            // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c kh√¥ng
            if (userData.balance < betAmount) {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c **$${new Intl.NumberFormat("en").format(betAmount)}**. S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† **$${new Intl.NumberFormat("en").format(userData.balance)}**.`);
                return await message.channel.send({ embeds: [embed] });
            }

            // L·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i v√† chu·∫©n h√≥a n√≥
            let playerChoiceInput = args[1]?.toLowerCase();
            let playerChoice; // Bi·∫øn n√†y s·∫Ω l∆∞u 'head' ho·∫∑c 'tail' ƒë√£ chu·∫©n h√≥a

            if (playerChoiceInput === "h") {
                playerChoice = "head";
            } else if (playerChoiceInput === "t") {
                playerChoice = "tail";
            } else if (playerChoiceInput === "head" || playerChoiceInput === "tail") {
                playerChoice = playerChoiceInput;
            } else {
                const embed = new EmbedBuilder()
                    .setColor(danger)
                    .setDescription(`Vui l√≤ng ch·ªçn "head", "tail", "h", ho·∫∑c "t". V√≠ d·ª•: \`${prefix}cf 1000 h\``);
                return await message.channel.send({ embeds: [embed] });
            }

            // Gi·∫£m s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i ngay l·∫≠p t·ª©c (ti·ªÅn ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t c∆∞·ª£c)
            await decBalance(userID, betAmount);
            // C·∫≠p nh·∫≠t userData.balance trong b·ªô nh·ªõ ƒë·ªÉ t√≠nh to√°n s·ªë d∆∞ hi·ªán t·∫°i sau khi c∆∞·ª£c
            userData.balance -= betAmount; 

            // Ti·∫øn h√†nh l·∫≠t ƒë·ªìng xu
            const coinResult = Math.random() < 0.5 ? "head" : "tail"; // 50% head, 50% tail
            let winAmount = 0;
            let resultMessage = "";
            let embedColor = "";

            if (playerChoice === coinResult) {
                // Ng∆∞·ªùi ch∆°i th·∫Øng
                winAmount = betAmount * 2; // Th·∫Øng g·∫•p ƒë√¥i s·ªë ti·ªÅn c∆∞·ª£c
                await incBalance(userID, winAmount); // TƒÉng s·ªë d∆∞
                resultMessage = `üéâ Ch√∫c m·ª´ng! ƒê·ªìng xu ƒë√£ ra **${coinResult.toUpperCase()}** v√† b·∫°n ƒë√£ th·∫Øng **$${new Intl.NumberFormat("en").format(betAmount)}**!`;
                embedColor = success; // M√†u xanh l√° c√¢y cho th·∫Øng
                userData.balance += winAmount; // C·∫≠p nh·∫≠t s·ªë d∆∞ cu·ªëi c√πng trong b·ªô nh·ªõ
            } else {
                // Ng∆∞·ªùi ch∆°i thua
                resultMessage = `üíî R·∫•t ti·∫øc! ƒê·ªìng xu ƒë√£ ra **${coinResult.toUpperCase()}** v√† b·∫°n ƒë√£ thua **$${new Intl.NumberFormat("en").format(betAmount)}**.`;
                embedColor = danger; // M√†u ƒë·ªè cho thua
                // userData.balance ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ƒë·∫∑t c∆∞·ª£c, kh√¥ng c·∫ßn thay ƒë·ªïi th√™m
            }

            // G·ª≠i embed k·∫øt qu·∫£
            const resultEmbed = new EmbedBuilder()
                .setColor(embedColor)
                .setTitle("ü™ô K·∫øt qu·∫£ Coin Flip!")
                .setDescription(resultMessage)
                .addFields(
                    { name: "B·∫°n ƒë√£ ch·ªçn", value: `\`${playerChoice.toUpperCase()}\``, inline: true },
                    { name: "S·ªë ti·ªÅn c∆∞·ª£c", value: `$${new Intl.NumberFormat("en").format(betAmount)}`, inline: true },
                    { name: "S·ªë d∆∞ hi·ªán t·∫°i", value: `$${new Intl.NumberFormat("en").format(userData.balance)}`, inline: true }
                )
                .setFooter({
                    text: `Ng∆∞·ªùi ch∆°i: ${playerUsername}`,
                    iconURL: playerAvatarURL,
                });

            await message.channel.send({ embeds: [resultEmbed] });

        } catch (error) {
            console.error("C√≥ l·ªói ·ªü l·ªánh coinflip:", error);
            const errorEmbed = new EmbedBuilder()
                .setColor(danger)
                .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh coinflip. Vui l√≤ng li√™n h·ªá v·ªõi admin.");
            await message.channel.send({ embeds: [errorEmbed] });
        }
    },
};