const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { primary } = require('../../color.json'); // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
const { prefix } = require("../../config.json");

module.exports = {
    cooldown: 3000,
    name: 'help',
    aliases: ['h'], // C√°c bi·ªát danh cho l·ªánh
    description: 'Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c l·ªánh c·ªßa bot',
    category: 'System', // Category cho l·ªánh help n√†y. ƒê·∫£m b·∫£o n√≥ KH√îNG n·∫±m trong danh s√°ch ·∫©n.
    run: async(client, message, args) => {
        const commands = client.prefix; // <-- THAY ƒê·ªîI T·∫†I ƒê√ÇY
        const actualPrefix = prefix || ',';

        // Nh√≥m c√°c l·ªánh theo category, lo·∫°i tr·ª´ 'Admin'
        const categorizedCommands = new Map();
        commands.forEach(command => {
            // Ki·ªÉm tra xem l·ªánh c√≥ c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt v√† kh√¥ng thu·ªôc category 'Admin' kh√¥ng
            // L∆ØU √ù: M·ªói l·ªánh prefix c·ªßa b·∫°n c≈©ng c·∫ßn c√≥ thu·ªôc t√≠nh 'category'
            if (command.name && command.description && command.category && command.category !== 'Admin') {
                if (!categorizedCommands.has(command.category)) {
                    categorizedCommands.set(command.category, []);
                }
                categorizedCommands.get(command.category).push(command);
            }
        });

        const categories = Array.from(categorizedCommands.keys());
        if (categories.length === 0) {
            const noCommandsEmbed = new EmbedBuilder()
                .setColor("Red")
                .setDescription('Hi·ªán t·∫°i kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ph√¢n lo·∫°i ho·∫∑c hi·ªÉn th·ªã.');
            return message.channel.send({ embeds: [noCommandsEmbed] });
        }

        // S·∫Øp x·∫øp c√°c category theo th·ª© t·ª± mong mu·ªën (v√≠ d·ª•: theo b·∫£ng ch·ªØ c√°i)
        categories.sort();

        let currentCategory = categories[0]; // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã category ƒë·∫ßu ti√™n

        // H√†m t·∫°o Embed cho category hi·ªán t·∫°i
        const createHelpEmbed = (categoryName) => {
            const cmds = categorizedCommands.get(categoryName);

            const embed = new EmbedBuilder()
                .setColor(primary)
                .setTitle(`üìö L·ªánh Bot - ${categoryName} üìö`)
                .setDescription(`S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem l·ªánh c·ªßa t·ª´ng danh m·ª•c.\n\n`);

            const commandList = cmds.map(cmd => {
                // S·ª≠ d·ª•ng command.aliases n·∫øu c√≥, ng∆∞·ª£c l·∫°i l√† r·ªóng
                let aliases = cmd.aliases && cmd.aliases.length > 0 ? ` (Alias: \`${cmd.aliases.join('`, `')}\`)` : '';
                let usage = cmd.usage && cmd.usage.length > 0 ? ` ${cmd.usage}` : '';
                return `\`${actualPrefix}${cmd.name}${usage}\`${aliases} - ${cmd.description}`;
            }).join('\n');

            embed.addFields({
                name: 'C√°c l·ªánh c√≥ s·∫µn:',
                value: commandList.length > 0 ? commandList : 'Kh√¥ng c√≥ l·ªánh n√†o trong danh m·ª•c n√†y.',
                inline: false
            });

            const notices = [
                '<bet>: S·ªë ti·ªÅn c∆∞·ª£c',
                '<amount>: S·ªë ti·ªÅn',
                '<user>: Tag ng∆∞·ªùi ch∆°i'
            ];
            const noticeList = notices.map(note => {
                return `\`${note}\``;
            }).join('\n');

            embed.addFields({
                name: 'Ch√∫ th√≠ch:',
                value: noticeList.length > 0 ? noticeList : 'Kh√¥ng c√≥ ch√∫ th√≠ch',
                inline: false
            });
            

            embed.setFooter({ text: `Y√™u c·∫ßu b·ªüi: ${message.author.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) });
            return embed;
        };

        // H√†m t·∫°o h√†ng n√∫t cho t·∫•t c·∫£ c√°c category
        const createCategoryRows = (currentSelectedCategory) => {
            const rows = [];
            let currentRow = new ActionRowBuilder();
            let buttonCount = 0;

            for (const category of categories) {
                // Discord gi·ªõi h·∫°n 5 n√∫t tr√™n m·ªói ActionRow
                if (buttonCount === 5) {
                    rows.push(currentRow);
                    currentRow = new ActionRowBuilder();
                    buttonCount = 0;
                }

                currentRow.addComponents(
                    new ButtonBuilder()
                        .setCustomId(`help_category_${category}`) // Custom ID ƒë·∫∑c tr∆∞ng cho t·ª´ng category
                        .setLabel(category)
                        .setStyle(category === currentSelectedCategory ? ButtonStyle.Success : ButtonStyle.Secondary) // N√∫t c·ªßa category ƒëang ch·ªçn s·∫Ω c√≥ m√†u kh√°c
                );
                buttonCount++;
            }
            // Th√™m h√†ng cu·ªëi c√πng n·∫øu c√≤n n√∫t
            if (currentRow.components.length > 0) {
                rows.push(currentRow);
            }
            return rows;
        };

        // G·ª≠i ph·∫£n h·ªìi ban ƒë·∫ßu v·ªõi category ƒë·∫ßu ti√™n v√† c√°c n√∫t
        const initialEmbed = createHelpEmbed(currentCategory);
        const initialRows = createCategoryRows(currentCategory);

        const response = await message.channel.send({
            embeds: [initialEmbed],
            components: initialRows,
        });

        // T·∫°o Collector ƒë·ªÉ l·∫Øng nghe t∆∞∆°ng t√°c n√∫t
        const collector = response.createMessageComponentCollector({
            filter: i => i.user.id === message.author.id && i.customId.startsWith('help_category_'), // Ch·ªâ ng∆∞·ªùi d√πng g·ªëc v√† n√∫t category
            time: 300000 // Collector s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t
        });

        collector.on('collect', async i => {
            const selectedCategory = i.customId.replace('help_category_', ''); // L·∫•y t√™n category t·ª´ custom ID

            // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng kh√¥ng th·ªÉ b·∫•m v√†o m·ªôt n√∫t 'Admin' gi·∫£ m·∫°o n·∫øu c√≥
            if (selectedCategory === 'Admin') {
                await i.deferUpdate(); // Defer update ƒë·ªÉ tr√°nh l·ªói
                return; // B·ªè qua n·∫øu ng∆∞·ªùi d√πng c·ªë g·∫Øng ch·ªçn category Admin
            }

            currentCategory = selectedCategory;

            const updatedEmbed = createHelpEmbed(currentCategory);
            const updatedRows = createCategoryRows(currentCategory);

            await i.update({ // S·ª≠ d·ª•ng i.update() ƒë·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn hi·ªán c√≥
                embeds: [updatedEmbed],
                components: updatedRows
            });
        });

        collector.on('end', async () => {
            // Khi collector k·∫øt th√∫c, v√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t
            const disabledRows = createCategoryRows(currentCategory); // T·∫°o l·∫°i h√†ng n√∫t
            disabledRows.forEach(row => {
                row.components.forEach(button => button.setDisabled(true));
            });

            try {
                // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi ch·ªânh s·ª≠a
                await response.edit({ components: disabledRows });
            } catch (error) {
                console.error("L·ªói khi v√¥ hi·ªáu h√≥a n√∫t help (prefix):", error);
            }
        });
    }
};